package com.syntun.extractor;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

import com.syntun.extractor.Selector.Node;

public class WebInfoExtractor {
	private static Logger logger = LogManager.getLogger(WebInfoExtractor.class.getName());
	
	public static List<Selector> extractWebInfo(String html, String baseUri) {
	    List<Selector> selectorList = parse(baseUri);
	    if (selectorList == null) {
	    	return null;
	    }
	    //Document doc = Jsoup.connect(html).get();
	    Document doc = Jsoup.parse(html, baseUri);
	    for (Selector selector : selectorList) {
	    	for (Node obj : selector.getNodes()) {
		    	selectInfo(doc, obj);
	    	}
	    }
	    return selectorList;
	}
	    
	private static void selectInfo(Document doc, Node node) {
	    if (node.getType().equals("text")) {
	    	Elements elements = doc.select(node.getXpath());
	    	String value=elements.text();
	        if (!node.getRegex().equals("")) {
	        	value=getToken(elements.text(), node.getRegex());
	        }
	        node.setNodeParseValue(value);
	    } else if (node.getType().equals("img")) {
	    	Elements elements = doc.select(node.getXpath() + "[src]");
	    	String value=elements.text();
	    	if (!node.getRegex().equals("")) {
	    		value=getToken(elements.attr("abs:src"), node.getRegex());
	        }
	    	node.setNodeParseValue(value);
	    }
	}
	    
	private static String getToken(String text, String pattern) {
	    ArrayList<String> tokens = new ArrayList<String>();
		Pattern tokSplitter = Pattern.compile(pattern);
		Matcher m = tokSplitter.matcher(text);
		while (m.find()) {
			tokens.add(m.group());
		}
		return tokens.toString();
	}
	
	//根据url匹配相应模板
	private static List<Selector> parse(String baseUri) {
		for (WebInfoTemplate template : WebInfoTemplate.getTemplateList()) {
			List<String> domainList = template.getDomain();
			try {
				if (domainList.contains(new URI(baseUri).getHost())) {
					List<Selector> selectorList = template.getSelectorList();
					return selectorList;
				}
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return null;
			}
		}
		logger.warn("Match template failure");
		return null;	
	}
	
}
