package com.syntun.extractor;

import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class PageInfoManager {
	private static Logger logger = LogManager.getLogger(PageInfoManager.class.getName());
	private Map<String, PageInfoTemplate> map = new HashMap<String, PageInfoTemplate>();
    
    public Map<String, PageInfoTemplate> getMap() {
		return map;
    }
    
    public List<Map<String, String>> getResult(String content, String baseUri) {
    	List<Selector> selectorList;
		String domain;
		try {
			domain = new URI(baseUri).getHost().toLowerCase();
			if (getMap().containsKey(domain)) {
				String nodeType = getMap().get(domain).getType();
				if (nodeType.equals("xpath")) {
					Selector selector = new XpathSelector();
					selectorList = getMap().get(domain).getSelectorList();
					return selector.extractPageInfo(content, baseUri, selectorList);
				}
				else if (nodeType.equals("json")) {
					Selector selector = new JsonSelector();
					selectorList = getMap().get(domain).getSelectorList();
					return selector.extractPageInfo(content, baseUri, selectorList);
				} else {
					System.err.println("Unrecognize template node: method");
					return null;
				}
			} else {
				logger.warn("Match template failure");
				return null;
			}
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
	}
    
	public boolean load(String tempDir) {
		File dir;
		try {
			dir = new File(tempDir);
		    for (File file : dir.listFiles()) {
			    PageInfoTemplate template = new PageInfoTemplate();
			    if (template.initTemplate(file.toString())) {
			    	String[] domains = template.getDomains();
			    	for (int i = 0; i < domains.length; i++) {
			    		if (!map.containsKey(domains[i].toLowerCase())) {
			    		    map.put(domains[i].toLowerCase(), template);
			    		} else {
			    			System.err.println("Duplicate domains");
			    			return false;
			    		}
			    	}
			    } else {
			    	System.err.println("Initialize template failure");
			    	return false;
			    }
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
			return true;
    }
	
}
